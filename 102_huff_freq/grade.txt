Grading at 11/14/2021:15:42:29.059503
For commit ID ff117160202b3499f78eee3a4b68654ee36ff9dc
Grading at Sun Nov 14 10:42:24 EST 2021
compiling
g++ -ggdb3 -Wall -Werror -pedantic -o testFreq testFreq.cpp readFreq.cpp
Make succeed, testFreq created
Testcase 1
-----------------------
  - Valgrind was clean (no errors, no memory leaks)
Checking output:
Your file matched the expected output
Testcase passed 
Testcase 2
-----------------------
  - Valgrind was clean (no errors, no memory leaks)
Checking output:
Your file matched the expected output
Testcase passed 
Testcase 3
-----------------------
  - Valgrind reported errors
Valgrind reported errors (test failed).
==20016== Memcheck, a memory error detector
==20016== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==20016== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==20016== Command: ./testFreq /usr/share/dict/words
==20016== Parent PID: 20015
==20016== 
==20016== Invalid read of size 8
==20016==    at 0x109264: readFrequencies(char const*) (readFreq.cpp:30)
==20016==    by 0x108F47: main (testFreq.cpp:10)
==20016==  Address 0x805b7fd48 is not stack'd, malloc'd or (recently) free'd
==20016== 
==20016== 
==20016== Process terminating with default action of signal 11 (SIGSEGV)
==20016==  Access not within mapped region at address 0x805B7FD48
==20016==    at 0x109264: readFrequencies(char const*) (readFreq.cpp:30)
==20016==    by 0x108F47: main (testFreq.cpp:10)
==20016==  If you believe this happened as a result of a stack
==20016==  overflow in your program's main thread (unlikely but
==20016==  possible), you can try to increase the size of the
==20016==  main thread stack using the --main-stacksize= flag.
==20016==  The main thread stack size used in this run was 8388608.
==20016== 
==20016== HEAP SUMMARY:
==20016==     in use at exit: 10,800 bytes in 3 blocks
==20016==   total heap usage: 4 allocs, 1 frees, 83,504 bytes allocated
==20016== 
==20016== LEAK SUMMARY:
==20016==    definitely lost: 0 bytes in 0 blocks
==20016==    indirectly lost: 0 bytes in 0 blocks
==20016==      possibly lost: 0 bytes in 0 blocks
==20016==    still reachable: 10,800 bytes in 3 blocks
==20016==         suppressed: 0 bytes in 0 blocks
==20016== Reachable blocks (those to which a pointer was found) are not shown.
==20016== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==20016== 
==20016== For counts of detected and suppressed errors, rerun with: -v
==20016== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 4
-----------------------
  - Valgrind was clean (no errors, no memory leaks)
Checking output:
Your file matched the expected output
Testcase passed 

Overall Grade: C
